import React, { useState } from 'react';
import ParkingLayoutEditor from '../components/ParkingLayoutEditor';
import axios from 'axios';

const styles = {
  container: {
    minHeight: '100vh',
    backgroundColor: '#1e1e1e',
    display: 'flex'
  },
  sidebar: {
    width: '400px',
    backgroundColor: '#232323',
    padding: '2rem',
    borderRight: '1px solid #383838',
    height: '100vh',
    overflowY: 'auto',
    position: 'fixed',
    left: 0,
    top: 0,
    zIndex: 1
  },
  mainContent: {
    marginLeft: '400px',
    flex: 1,
    padding: '2rem',
    backgroundColor: '#1e1e1e',
    minHeight: '100vh'
  },
  header: {
    fontSize: '1.5rem',
    fontWeight: 'bold',
    color: 'white',
    marginBottom: '1.5rem'
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    gap: '1.5rem'
  },
  input: {
    width: '100%',
    padding: '0.5rem 1rem',
    backgroundColor: '#2d2d2d',
    border: '1px solid #383838',
    borderRadius: '0.375rem',
    color: 'white',
    outline: 'none'
  },
  label: {
    display: 'block',
    fontSize: '0.875rem',
    fontWeight: '500',
    color: '#d1d5db',
    marginBottom: '0.5rem'
  },
  error: {
    marginTop: '0.5rem',
    fontSize: '0.875rem',
    color: '#ef4444'
  },
  editorContainer: {
    backgroundColor: '#232323',
    borderRadius: '0.5rem',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
    padding: '1.5rem',
    height: 'calc(100vh - 4rem)'
  },
  editorContent: {
    border: '1px solid #383838',
    borderRadius: '0.5rem',
    overflow: 'hidden',
    height: 'calc(100% - 4rem)'
  },
  uploadArea: {
    marginTop: '0.25rem',
    display: 'flex',
    justifyContent: 'center',
    padding: '1.5rem',
    border: '2px dashed #383838',
    borderRadius: '0.375rem',
    cursor: 'pointer'
  },
  button: (disabled) => ({
    width: '100%',
    backgroundColor: disabled ? '#60a5fa80' : '#3b82f6',
    color: 'white',
    padding: '0.5rem 1rem',
    borderRadius: '0.375rem',
    border: 'none',
    cursor: disabled ? 'not-allowed' : 'pointer',
    transition: 'all 0.2s'
  })
};

const ManageParkingLayout = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [layoutName, setLayoutName] = useState('');
  const [currentLayout, setCurrentLayout] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState(null);
  const [savingError, setSavingError] = useState(null);

  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
    setUploadError(null);
  };

  const handleUpload = async () => {
    if (!selectedFile || !layoutName) {
      alert('Please select a file and enter a layout name');
      return;
    }

    const token = localStorage.getItem('token');
    if (!token) {
      alert('You must be logged in to upload layouts');
      return;
    }

    setIsUploading(true);
    setUploadError(null);

    try {
      const formData = new FormData();
      formData.append('background_image', selectedFile);
      formData.append('name', layoutName);
      formData.append('layout_data', JSON.stringify({ spaces: [] }));

      const response = await axios.post('http://localhost:8000/api/parking-layouts', formData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data',
          'Accept': 'application/json'
        }
      });

      if (!response.data) {
        throw new Error('No data received from server');
      }

      const layoutData = response.data;
      if (!layoutData.background_image) {
        throw new Error('No image path received from server');
      }

      const imageUrl = `http://localhost:8000/api/image/${layoutData.background_image}`;
      
      // Pre-load the image
      const img = new Image();
      img.onload = () => {
        setCurrentLayout({
          id: layoutData.id,
          imageUrl: imageUrl,
          name: layoutData.name,
          layoutData: layoutData.layout_data || { spaces: [] }
        });
        setIsUploading(false);
        setLayoutName('');
        setSelectedFile(null);
      };
      
      img.onerror = () => {
        console.error('Failed to load image:', imageUrl);
        setUploadError('Layout uploaded but failed to load image');
        setIsUploading(false);
      };

      img.src = imageUrl;

    } catch (error) {
      console.error('Error uploading layout:', error);
      setIsUploading(false);
      
      if (error.response) {
        setUploadError(error.response.data.message || 'Server error');
      } else if (error.request) {
        setUploadError('No response from server');
      } else {
        setUploadError(error.message || 'Unknown error occurred');
      }
    }
  };

  return (
    <div style={styles.container}>
      <div style={styles.sidebar}>
        <h2 style={styles.header}>Upload New Layout</h2>
        <div style={styles.form}>
          {/* Layout Name Input */}
          <div>
            <label style={styles.label}>
              Layout Name
            </label>
            <input
              type="text"
              value={layoutName}
              onChange={(e) => setLayoutName(e.target.value)}
              style={styles.input}
              placeholder="Enter layout name"
            />
          </div>

          {/* File Upload */}
          <div>
            <label style={styles.label}>
              Background Image
            </label>
            <div style={styles.uploadArea}>
              <div style={{ textAlign: 'center' }}>
                <svg
                  style={{
                    width: '3rem',
                    height: '3rem',
                    color: '#9ca3af',
                    margin: '0 auto'
                  }}
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 48 48"
                  aria-hidden="true"
                >
                  <path
                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                    strokeWidth={2}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <div style={{
                  display: 'flex',
                  fontSize: '0.875rem',
                  color: '#9ca3af',
                  marginTop: '1rem',
                  justifyContent: 'center'
                }}>
                  <label style={{
                    cursor: 'pointer',
                    color: '#3b82f6',
                    fontWeight: '500'
                  }}>
                    <span>Upload a file</span>
                    <input
                      type="file"
                      onChange={handleFileChange}
                      accept="image/*"
                      style={{ display: 'none' }}
                    />
                  </label>
                  <p style={{ marginLeft: '0.25rem', color: '#9ca3af' }}>or drag and drop</p>
                </div>
                <p style={{
                  fontSize: '0.75rem',
                  color: '#9ca3af',
                  marginTop: '0.5rem'
                }}>PNG, JPG, GIF up to 10MB</p>
              </div>
            </div>
            {selectedFile && (
              <p style={{
                marginTop: '0.5rem',
                fontSize: '0.875rem',
                color: '#d1d5db'
              }}>
                Selected file: {selectedFile.name}
              </p>
            )}
          </div>

          {/* Upload Button */}
          <div>
            <button
              onClick={handleUpload}
              disabled={isUploading || !selectedFile || !layoutName}
              style={styles.button(isUploading || !selectedFile || !layoutName)}
            >
              {isUploading ? 'Uploading...' : 'Upload Layout'}
            </button>
          </div>

          {/* Error Message */}
          {uploadError && (
            <div style={styles.error}>
              Error: {uploadError}
            </div>
          )}
        </div>
      </div>

      {/* Main content area */}
      <div style={styles.mainContent}>
        {currentLayout && (
          <div style={styles.editorContainer}>
            <h2 style={styles.header}>
              Edit Parking Layout: {currentLayout.name}
            </h2>
            <div style={styles.editorContent}>
              <ParkingLayoutEditor 
                layoutId={currentLayout.id}
                backgroundImage={currentLayout.imageUrl}
                initialLayoutData={currentLayout.layoutData}
                onError={(error) => {
                  if (error?.response?.status === 422) {
                    setSavingError('Invalid layout data. Please check your parking space configuration.');
                  } else {
                    setSavingError(error.message || 'Error saving layout');
                  }
                }}
              />
            </div>
            {savingError && (
              <div style={styles.error}>
                {savingError}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ManageParkingLayout;
